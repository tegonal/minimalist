package com.tegonal.minimalist.generators

/**
 * Combines `this` [RandomArgsGenerator] with the given [other] [RandomArgsGenerator], [RandomArgsGenerator.transform]ing
 * the pairwise generated values of type [A1] and [A2] to type [R] with the help of the given [transform] function.
 *
 * @param other The other [RandomArgsGenerator] which generates values of type [A2].
 * @param transform The transformation function which takes an [A1] and [A2] and produces an [R].
 *
 * @param A1 The type of values generated by `this` [RandomArgsGenerator].
 * @param A2 The type of values generated by the given [other] [RandomArgsGenerator].
 * @param R the type of values generated by the resulting [RandomArgsGenerator].
 *
 * @return The resulting [RandomArgsGenerator] which generates values of type [R].
 *
 * @since 2.0.0
 */
fun <A1, A2, R> RandomArgsGenerator<A1>.combine(
	other: RandomArgsGenerator<A2>,
	transform: (A1, A2) -> R
): RandomArgsGenerator<R> = this.transform { it.zip(other.generate(), transform) }


/**
 * Creates for each generated value of type [A1] by `this` [RandomArgsGenerator] another [RandomArgsGenerator] with the
 * help of the given [otherFactory] where the other generator generates values of type [A2] and then combines the value
 * of `this` [RandomArgsGenerator] with one value of the other [RandomArgsGenerator].
 *
 * @param otherFactory Builds another [RandomArgsGenerator] based on a given value of type [A1].
 *
 * @param A1 The type of values generated by `this` [RandomArgsGenerator].
 * @param A2 The type of values generated by the given other [RandomArgsGenerator] (built by the given [otherFactory]).
 *
 * @return The resulting [RandomArgsGenerator] which generates [Pair]s of [A1] and [A2].
 *
 * @since 2.0.0
 */
fun <A1, A2> RandomArgsGenerator<A1>.combineDependent(
	otherFactory: (A1) -> RandomArgsGenerator<A2>
): RandomArgsGenerator<Pair<A1, A2>> = combineDependent(otherFactory, ::Pair)

/**
 * Creates for each generated value of type [A1] by `this` [RandomArgsGenerator] another [RandomArgsGenerator] with the
 * help of the given [otherFactory] where the other generator generates values of type [A2] and then [transform]s the
 * value of `this` [RandomArgsGenerator] with one value of the other [RandomArgsGenerator] to type [R].
 *
 *
 * @param otherFactory Builds another [RandomArgsGenerator] based on a given value of type [A1].
 * @param transform The transformation function which takes an [A1] and [A2] and produces an [R].
 *
 * @param A1 The type of values generated by `this` [RandomArgsGenerator].
 * @param A2 The type of values generated by the given other [RandomArgsGenerator] (built by the given [otherFactory]).
 * @param R the type of values generated by the resulting [RandomArgsGenerator].
 *
 * @return The resulting [RandomArgsGenerator] which generates values of type [R].
 *
 * @return The resulting [RandomArgsGenerator] which generates [Pair]s of [A1] and [A2].
 *
 * @since 2.0.0
 */
fun <A1, A2, R> RandomArgsGenerator<A1>.combineDependent(
	otherFactory: (A1) -> RandomArgsGenerator<A2>,
	transform: (A1, A2) -> R
): RandomArgsGenerator<R> = this.map { transform(it, otherFactory(it).generate().first()) }
