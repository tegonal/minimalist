package com.tegonal.minimalist.generators

import com.tegonal.minimalist.config._components
import com.tegonal.minimalist.config.build
import com.tegonal.minimalist.providers.ArgsRange
import com.tegonal.minimalist.providers.ArgsRangeDecider

/**
 * Represents an [ArgsGenerator] which provides the method [generate] where some part of [T] is always in the
 * same order and a finite number before repeating and another part of [T] is undefined (could be ordered and finite,
 * could be ordered and infinite, could be random).
 *
 * @param T the type of values generated by `this` [RandomArgsGenerator].
 *
 * @since 2.0.0
 */
interface SemiOrderedArgsGenerator<out T> : ArgsGenerator<T> {
	/**
	 * Returns the maximum of values `this` generator is able to generate before some part of it start over again.
	 *
	 * @since 2.0.0
	 */
	val size: Int

	/**
	 * Returns an infinite stream of values starting at [offset] and repeating after reaching [size] of values
	 * where one part of the values are always the same when generated multiple times.
	 *
	 * @since 2.0.0
	 */
	fun generate(offset: Int = 0): Sequence<T>
}


/**
 * Returns a finite sequence of values influenced by the given [ArgsRange] which the configured [ArgsRangeDecider] will
 * decide on.
 *
 * @since 2.0.0
 */
fun <T> SemiOrderedArgsGenerator<T>.generateAndTakeBasedOnDecider(): Sequence<T> =
	_components.build<ArgsRangeDecider>().decideArgsRange(this).let(::generateAndTake)

/**
 * Returns a finite sequence of values influenced by the given [ArgsRange].
 *
 * @since 2.0.0
 */
fun <T> SemiOrderedArgsGenerator<T>.generateAndTake(argsRange: ArgsRange): Sequence<T> =
	generate(argsRange.offset).take(argsRange.take)
