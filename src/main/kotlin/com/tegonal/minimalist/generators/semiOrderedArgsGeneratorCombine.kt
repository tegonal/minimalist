@file:JvmName("SemiOrderedArgsGeneratorCombineKt")
@file:JvmMultifileClass
package com.tegonal.minimalist.generators

import com.tegonal.minimalist.generators.impl.SemiOrderedArgsGeneratorCombiner
import com.tegonal.minimalist.generators.impl.SemiOrderedArgsWithRandomArgsGeneratorCombiner
import com.tegonal.minimalist.generators.impl.throwUnsupportedArgsGenerator

/**
 * Combines `this` [SemiOrderedArgsGenerator] with the given [other] [SemiOrderedArgsGenerator] and [transform]s the generated
 * values pairwise, returning a [SemiOrderedArgsGenerator] which generates values of type [R].
 *
 * The resulting [SemiOrderedArgsGenerator] generates
 * [this.size][SemiOrderedArgsGenerator.size] * [other.size][SemiOrderedArgsGenerator.size] values before repeating.
 *
 * @param other The other [OrderedArgsGenerator] which generates values of type [A2].
 * @param A1 The type of values generated by `this` [OrderedArgsGenerator].
 * @param A2 the type of values generated by the [other] [OrderedArgsGenerator].
 * @param R the type of values generated by the resulting [OrderedArgsGenerator].
 *
 * @return The resulting [OrderedArgsGenerator] which generates values of type [R].
 *
 * @since 2.0.0
 */
fun <A1, A2, R> SemiOrderedArgsGenerator<A1>.combine(
	other: SemiOrderedArgsGenerator<A2>,
	transform: (A1, A2) -> R
): SemiOrderedArgsGenerator<R> = SemiOrderedArgsGeneratorCombiner(this, other, transform)

/**
 * Combines `this` [SemiOrderedArgsGenerator] with the given [other] [RandomArgsGenerator] and [transform]s the generated
 * values pairwise, returning a [SemiOrderedArgsGenerator] which generates values of type [R].
 *
 * The resulting [SemiOrderedArgsGenerator] still generates [this.size][SemiOrderedArgsGenerator.size] values before repeating.
 *
 * @param other The other [RandomArgsGenerator] which generates values of type [A2].
 * @param A1 The type of values generated by `this` [OrderedArgsGenerator].
 * @param A2 the type of values generated by the [other] [OrderedArgsGenerator].
 * @param R the type of values generated by the resulting [OrderedArgsGenerator].
 *
 * @return The resulting [OrderedArgsGenerator] which generates values of type [R].
 *
 * @since 2.0.0
 */
fun <A1, A2, R> SemiOrderedArgsGenerator<A1>.combine(
	other: RandomArgsGenerator<A2>,
	transform: (A1, A2) -> R
): SemiOrderedArgsGenerator<R> = SemiOrderedArgsWithRandomArgsGeneratorCombiner(this, other, transform)


/**
 * Combines `this` [SemiOrderedArgsGenerator] with the given [other] [ArgsGenerator] and [transform]s the generated
 * values pairwise, returning a [SemiOrderedArgsGenerator] which generates values of type [R].
 *
 * It is not statically known what [SemiOrderedArgsGenerator.size] the resulting [SemiOrderedArgsGenerator] will have.
 *
 * @return The resulting [OrderedArgsGenerator] which generates values of type [R].
 *
 * @since 2.0.0
 */
fun <A1, A2, R> SemiOrderedArgsGenerator<A1>.combine(
	other: ArgsGenerator<A2>,
	transform: (A1, A2) -> R
): SemiOrderedArgsGenerator<R> = when (other) {
	is SemiOrderedArgsGenerator<A2> -> combine(other, transform)
	is RandomArgsGenerator<A2> -> combine(other, transform)
	else -> throwUnsupportedArgsGenerator(other)
}
