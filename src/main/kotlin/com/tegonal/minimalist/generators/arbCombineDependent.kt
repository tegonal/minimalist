@file:JvmName("ArbCombineDependentKt")
@file:JvmMultifileClass
package com.tegonal.minimalist.generators

/**
 * Creates for each generated value of type [A1] by `this` [ArbArgsGenerator] another [ArbArgsGenerator] with the
 * help of the given [otherFactory] where the other generator generates values of type [A2] and then [transform]s the
 * value of `this` [ArbArgsGenerator] with one value of the other [ArbArgsGenerator] to type [R].
 *
 * @param otherFactory Builds another [ArbArgsGenerator] based on a given value of type [A1].
 * @param transform The transformation function which takes an [A1] and [A2] and produces an [R].
 *
 * @param A1 The type of values generated by `this` [ArbArgsGenerator].
 * @param A2 The type of values generated by the given other [ArbArgsGenerator] (built by the given [otherFactory]).
 * @param R the type of values generated by the resulting [ArbArgsGenerator].
 *
 * @return The resulting [ArbArgsGenerator] which generates values of type [R].
 *
 * @return The resulting [ArbArgsGenerator] which generates [Pair]s of [A1] and [A2].
 *
 * @since 2.0.0
 */
fun <A1, A2, R> ArbArgsGenerator<A1>.combineDependent(
	otherFactory: ArbExtensionPoint.(A1) -> ArbArgsGenerator<A2>,
	transform: (A1, A2) -> R
): ArbArgsGenerator<R> = mapIndexed { index, a1, seedOffset ->
	transform(a1, this._core.arb.otherFactory(a1).generateOne(index + seedOffset))
}
