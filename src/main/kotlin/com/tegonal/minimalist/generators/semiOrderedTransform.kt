package com.tegonal.minimalist.generators

import com.tegonal.minimalist.generators.impl.InternalDangerousApi
import com.tegonal.minimalist.generators.impl.throwMaterialisingSemiOrderedArgsGeneratorNotSupported
import com.tegonal.minimalist.generators.impl.transformInternal

/**
 * Maps the values `this` [SemiOrderedArgsGenerator] generates to type [R] with the help of the given [transform] function.
 *
 * @param transform The transformation function which takes a [T] and produces an [R].
 *
 * @param T The type of values generated by `this` [SemiOrderedArgsGenerator].
 * @param R the type of values generated by the resulting [SemiOrderedArgsGenerator].
 *
 * @return The resulting [SemiOrderedArgsGenerator] which generates values of type [R].
 *
 * @since 2.0.0
 */
@OptIn(InternalDangerousApi::class)
fun <T, R> SemiOrderedArgsGenerator<T>.map(transform: (T) -> R): SemiOrderedArgsGenerator<R> =
	transformInternal { seq -> seq.map(transform) }

@Suppress("UnusedReceiverParameter")
@Deprecated(
	""""
	Materialising means fixing the undefined/random part of an SemiOrderedArgsGenerator.
	Normally you do not want to turn an SemiOrderedArgsGenerator into an OrderedArgsGenerator as you basically
	loose the randomness you added in the first place.
	If you still want to do this, then use:

	let { g -> g.generate().take(g.size) }.filter(predicate).toList().let(ordered::fromList)
	""",
	ReplaceWith("let { g -> g.generate().take(g.size) }.filter(predicate).toList().let(ordered::fromList)"),
	level = DeprecationLevel.ERROR
)
fun <T> SemiOrderedArgsGenerator<T>.filterMaterialised(@Suppress("UNUSED_PARAMETER") predicate: (T) -> Boolean): OrderedArgsGenerator<T> =
	throwMaterialisingSemiOrderedArgsGeneratorNotSupported()

@Suppress("UnusedReceiverParameter")
@Deprecated(
	""""
	Materialising means fixing the undefined/random part of an SemiOrderedArgsGenerator.
	Normally you do not want to turn an SemiOrderedArgsGenerator into an OrderedArgsGenerator as you basically
	loose the randomness you added in the first place.
	If you still want to do this, then use:

	let { g -> g.generate().take(g.size) }.filterNot(predicate).toList().let(ordered::fromList)
	""",
	ReplaceWith("let { g -> g.generate().take(g.size) }.filterNot(predicate).toList().let(ordered::fromList)"),
	level = DeprecationLevel.ERROR
)
fun <T> SemiOrderedArgsGenerator<T>.filterNotMaterialised(@Suppress("UNUSED_PARAMETER") predicate: (T) -> Boolean): OrderedArgsGenerator<T> =
	throwMaterialisingSemiOrderedArgsGeneratorNotSupported()


@Suppress("UnusedReceiverParameter")
@Deprecated(
	""""
	Materialising means fixing the undefined/random part of an SemiOrderedArgsGenerator.
	Normally you do not want to turn an SemiOrderedArgsGenerator into an OrderedArgsGenerator as you basically
	loose the randomness you added in the first place.
	If you still want to do this, then use:

	let { g -> g.generate().take(g.size) }.let(transform).toList().let(ordered::fromList)
	""",
	ReplaceWith("let { g -> g.generate().take(g.size) }.filter(predicate).toList().let(ordered::fromList)"),
	level = DeprecationLevel.ERROR
)
fun <T, R> SemiOrderedArgsGenerator<T>.transformMaterialised(@Suppress("UNUSED_PARAMETER") transform: (Sequence<T>) -> Sequence<R>): OrderedArgsGenerator<T> =
	throwMaterialisingSemiOrderedArgsGeneratorNotSupported()
