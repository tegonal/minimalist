// --------------------------------------------------------------------------------------------------------------------
// automatically generated, don't modify here but in:
// gradle/code-generation/src/main/kotlin/code-generation.generate.gradle.kts => generate
// --------------------------------------------------------------------------------------------------------------------
package com.tegonal.minimalist.generators

import com.tegonal.minimalist.config.MinimalistConfig
import com.tegonal.minimalist.config._components
import com.tegonal.minimalist.config.config
import com.tegonal.minimalist.generators.impl.SemiOrderedArgsGeneratorTransformer

/**
 * Maps the values `this` [SemiOrderedArgsGenerator] generates to type [R] with the help of the given [transform] function.
 *
 * @param transform The transformation function which takes a [T] and produces an [R].
 *
 * @param T The type of values generated by `this` [SemiOrderedArgsGenerator].
 * @param R the type of values generated by the resulting [SemiOrderedArgsGenerator].
 *
 * @return The resulting [SemiOrderedArgsGenerator] which generates values of type [R].
 *
 * @since 2.0.0
 */
fun <T, R> SemiOrderedArgsGenerator<T>.map(transform: (T) -> R): SemiOrderedArgsGenerator<R> =
	transformInternal { it.map(transform) }

/**
 * Maps the values `this` [SemiOrderedArgsGenerator] generates together with an index to type [R] with the help of the
 * given [transform] function.
 *
 * In case [MinimalistConfig.offsetToDecidedOffset] is `null` or `0` the index starts at `0` otherwise at
 * [MinimalistConfig.offsetToDecidedOffset].
 *
 * @param transform The transformation function which takes a [T] and produces an [R].
 *
 * @param T The type of values generated by `this` [SemiOrderedArgsGenerator].
 * @param R the type of values generated by the resulting [SemiOrderedArgsGenerator].
 *
 * @return The resulting [SemiOrderedArgsGenerator] which generates values of type [R].
 *
 * @since 2.0.0
 */
fun <T, R> SemiOrderedArgsGenerator<T>.mapIndexed(transform: (index: Int, T) -> R): SemiOrderedArgsGenerator<R> =
	transformInternal { seq ->
		val offset = _components.config.offsetToDecidedOffset
		if (offset == null) {
			seq.mapIndexed(transform)
		} else {
			seq.mapIndexed { index, it ->
				transform(
					// expected that this overflows in the worst case
					index + offset,
					it,
				)
			}
		}
	}

private fun <R, T> SemiOrderedArgsGenerator<T>.transformInternal(transform: (Sequence<T>) -> Sequence<R>): SemiOrderedArgsGeneratorTransformer<T, R> =
	SemiOrderedArgsGeneratorTransformer(this, transform)

@Suppress("UnusedReceiverParameter")
@Deprecated(
	""""
		Materialising means fixing the undefined/random part of an SemiOrderedArgsGenerator.
		Normally you do not want to turn an SemiOrderedArgsGenerator into an OrderedArgsGenerator as you basically
		loose the randomness you added in the first place.
		If you still want to do this, then use:

		let { g -> g.generate().take(g.size) }.filter(predicate).toList().let(ordered::fromList)
	""",
	ReplaceWith("let { g -> g.generate().take(g.size) }.filter(predicate).toList().let(ordered::fromList)"),
	level = DeprecationLevel.ERROR
)
fun <T> SemiOrderedArgsGenerator<T>.filterMaterialised(@Suppress("UNUSED_PARAMETER") predicate: (T) -> Boolean): OrderedArgsGenerator<T> =
	throw UnsupportedOperationException("Materialising SemiOrderedArgsGenerator is not supported out of the box to prevent bugs in the test setup")

@Suppress("UnusedReceiverParameter")
@Deprecated(
	""""
		Materialising means fixing the undefined/random part of an SemiOrderedArgsGenerator.
		Normally you do not want to turn an SemiOrderedArgsGenerator into an OrderedArgsGenerator as you basically
		loose the randomness you added in the first place.
		If you still want to do this, then use:

		let { g -> g.generate().take(g.size) }.filterNot(predicate).toList().let(ordered::fromList)
	""",
	ReplaceWith("let { g -> g.generate().take(g.size) }.filterNot(predicate).toList().let(ordered::fromList)"),
	level = DeprecationLevel.ERROR
)
fun <T> SemiOrderedArgsGenerator<T>.filterNotMaterialised(@Suppress("UNUSED_PARAMETER") predicate: (T) -> Boolean): OrderedArgsGenerator<T> =
	throw UnsupportedOperationException("Materialising SemiOrderedArgsGenerator is not supported out of the box to prevent bugs in the test setup")


@Suppress("UnusedReceiverParameter")
@Deprecated(
	""""
		Materialising means fixing the undefined/random part of an SemiOrderedArgsGenerator.
		Normally you do not want to turn an SemiOrderedArgsGenerator into an OrderedArgsGenerator as you basically
		loose the randomness you added in the first place.
		If you still want to do this, then use:

		let { g -> g.generate().take(g.size) }.let(transform).toList().let(ordered::fromList)
	""",
	ReplaceWith("let { g -> g.generate().take(g.size) }.filter(predicate).toList().let(ordered::fromList)"),
	level = DeprecationLevel.ERROR
)
fun <T, R> SemiOrderedArgsGenerator<T>.transformMaterialised(@Suppress("UNUSED_PARAMETER") transform: (Sequence<T>) -> Sequence<R>): OrderedArgsGenerator<T> =
	throw UnsupportedOperationException("Materialising SemiOrderedArgsGenerator is not supported out of the box to prevent bugs in the test setup")
