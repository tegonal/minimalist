package com.tegonal.minimalist.generators

import com.tegonal.minimalist.config._components
import com.tegonal.minimalist.config.ordered
import com.tegonal.minimalist.generators.impl.InternalDangerousApi
import com.tegonal.minimalist.generators.impl.transformInternal

/**
 * Maps the values `this` [OrderedArgsGenerator] generates to type [R] with the help of the given [transform] function.
 *
 * @param transform The transformation function which takes a [T] and produces an [R].
 *
 * @param T The type of values generated by `this` [OrderedArgsGenerator].
 * @param R the type of values generated by the resulting [OrderedArgsGenerator].
 *
 * @return The resulting [OrderedArgsGenerator] which generates values of type [R].
 *
 * @since 2.0.0
 */
@OptIn(InternalDangerousApi::class)
fun <T, R> OrderedArgsGenerator<T>.map(transform: (T) -> R): OrderedArgsGenerator<R> =
// TODO 2.1.0 bench if it would be worth it to introduce an OrderedArgsGeneratorMapper which takes T -> R and
	//  provides an optimised generateOne method
	transformInternal { seq -> seq.map(transform) }

/**
 * Generates [size][OrderedArgsGenerator.size] values, filters the resulting [Sequence] so that only elements matching the
 * given [predicate] remain and creates a new [OrderedArgsGenerator] based on it.
 *
 * @param predicate which should return `true` for a given value if it shall be kept in the sequence, otherwise `false`.
 *
 * @param T The type of values generated by `this` [OrderedArgsGenerator].
 *
 * @return The resulting [OrderedArgsGenerator] which generates only values for which
 *   the given [predicate] returns `true`.
 *
 * @since 2.0.0
 */
fun <T> OrderedArgsGenerator<T>.filterMaterialised(predicate: (T) -> Boolean): OrderedArgsGenerator<T> =
	transformMaterialised { seq -> seq.filter(predicate) }

/**
 * Generates [size][OrderedArgsGenerator.size] values, filters the resulting [Sequence] so that only elements matching
 * **not** the given [predicate] remain and creates a new [OrderedArgsGenerator] based on it.
 *
 * @param predicate which should return `false` for a given value if it shall be kept in the sequence, otherwise `true`.
 *
 * @param T The type of values generated by `this` [OrderedArgsGenerator].
 *
 * @return The resulting [OrderedArgsGenerator] which generates only values for which
 *   the given [predicate] returns `false`.
 *
 * @since 2.0.0
 */
fun <T> OrderedArgsGenerator<T>.filterNotMaterialised(predicate: (T) -> Boolean): OrderedArgsGenerator<T> =
	transformMaterialised { seq -> seq.filterNot(predicate) }

/**
 * Generates [size][OrderedArgsGenerator.size] values, [transform]s and materialises them and creates a new
 * [OrderedArgsGenerator] based on it.
 *
 * @param transform The transformation function which takes a [Sequence] of type [T] and
 *   produces a finite [Sequence] of type [R] (since we materialise you will run into a OutOfMemoryException if
 *   your resulting [Sequence] is too big/infinite).
 *
 * @param T The type of values generated by `this` [OrderedArgsGenerator].
 * @param R the type of values generated by the resulting [OrderedArgsGenerator].
 *
 * @return The resulting [OrderedArgsGenerator] which generates values of type [R].
 *
 * @since 2.0.0
 */
fun <T, R> OrderedArgsGenerator<T>.transformMaterialised(
	transform: (Sequence<T>) -> Sequence<R>,
): OrderedArgsGenerator<R> = generate(offset = 0).take(size).let(transform).toList().let(_components.ordered::fromList)
