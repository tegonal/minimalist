package com.tegonal.minimalist.generators

import com.tegonal.minimalist.config.IsComponentFactoryContainerProvider

/**
 * Represents a generator which generates [T]s.
 *
 * @param T the type of values generated by `this` [ArgsGenerator].
 *
 * @since 2.0.0
 */
interface ArgsGenerator<out T> : IsComponentFactoryContainerProvider

/**
 * Represents an [ArgsGenerator] which provides [generate] which generates [T]s an infinite number of times in a random
 * or not defined order.
 *
 * @param T the type of values generated by `this` [RandomArgsGenerator].
 *
 * @since 2.0.0
 */
interface RandomArgsGenerator<out T> : ArgsGenerator<T> {

	/**
	 * Generates an infinite stream of random values of type [T].
	 * @since 2.0.0
	 */
	fun generate(): Sequence<T>
}

/**
 * Represents an [ArgsGenerator] which provides the method [generate] where some part of [T] is always in the
 * same order and a finite number before repeating and another part of [T] is undefined (could be ordered and finite,
 * could be ordered and infinite, could be random).
 *
 * @param T the type of values generated by `this` [RandomArgsGenerator].
 *
 * @since 2.0.0
 */
interface SemiOrderedArgsGenerator<out T> : ArgsGenerator<T> {
	/**
	 * Returns the maximum of values `this` generator is able to generate before some part of it start over again.
	 *
	 * @since 2.0.0
	 */
	val size: Int

	/**
	 * Returns an infinite stream of values starting at [offset] and repeating after reaching [size] of values
	 * where one part of the values are always the same when generated multiple times.
	 *
	 * @since 2.0.0
	 */
	fun generate(offset: Int = 0): Sequence<T>
}


/**
 * Represents an [ArgsGenerator] which provides the method [generate] which generates [T]s always in the same
 * order and a finite number ([size]) before repeating.
 *
 * @since 2.0.0
 */
interface OrderedArgsGenerator<out T> : SemiOrderedArgsGenerator<T> {

	/**
	 * Returns the maximum of values `this` generator is able to generate before it starts over again.
	 *
	 * @since 2.0.0
	 */
	override val size: Int

	/**
	 * Returns an infinite stream of values starting at [offset] and repeating after reaching [size] of values
	 * where always the same values are generated when called multiple times.
	 *
	 * @since 2.0.0
	 */
	override fun generate(offset: Int): Sequence<T>
}


