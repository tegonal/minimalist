@file:JvmName("SemiOrderedCombineDependentKt")
@file:JvmMultifileClass

package com.tegonal.minimalist.generators

import com.tegonal.minimalist.config._components
import com.tegonal.minimalist.config.arb
import com.tegonal.minimalist.generators.impl.throwMaterialisingSemiOrderedArgsGeneratorNotSupported

/**
 * Creates for each generated value of type [A1] by `this` [SemiOrderedArgsGenerator] another [ArbArgsGenerator]
 * with the help of the given [otherFactory] where the other generator generates values of type [A2] and then
 * [transform]s the value of `this` [SemiOrderedArgsGenerator] with one value of the other [ArbArgsGenerator] to type [R].
 *
 * @param otherFactory Builds an [ArbArgsGenerator] based on a given value of type [A1].
 * @param transform The transformation function which takes an [A1] and [A2] and produces an [R].
 *
 * @param A1 The type of values generated by `this` [SemiOrderedArgsGenerator].
 * @param A2 The type of values generated by the given [ArbArgsGenerator] (built by the given [otherFactory]).
 * @param R the type of values generated by the resulting [SemiOrderedArgsGenerator].
 *
 * @return The resulting [SemiOrderedArgsGenerator] which generates values of type [R].
 *
 * @since 2.0.0
 */
fun <A1, A2, R> SemiOrderedArgsGenerator<A1>.combineDependent(
	otherFactory: ArbExtensionPoint.(A1) -> ArbArgsGenerator<A2>,
	transform: (A1, A2) -> R
): SemiOrderedArgsGenerator<R> = mapIndexed { index, a1 ->
	transform(a1, this._components.arb.otherFactory(a1).generateOne(index))
}

@Suppress("UnusedReceiverParameter")
@Deprecated(
	""""
	Materialising means fixing the undefined/random part of an SemiOrderedArgsGenerator.
	Normally you do not want to turn an SemiOrderedArgsGenerator into an OrderedArgsGenerator as you basically
	loose the randomness you added in the first place.
	If you still want to do this, then use:

	let { g -> g.generate().take(g.size) }.toList().let(ordered::fromList).combineDependentMaterialised(otherFactory, transform)
	""",
	ReplaceWith("let { g -> g.generate().take(g.size) }.toList().let(ordered::fromList).combineDependentMaterialised(otherFactory, transform)"),
	level = DeprecationLevel.ERROR
)
fun <A1, A2, R> SemiOrderedArgsGenerator<A1>.combineDependentMaterialised(
	@Suppress("UNUSED_PARAMETER") otherFactory: OrderedExtensionPoint.(A1) -> OrderedArgsGenerator<A2>,
	@Suppress("UNUSED_PARAMETER") transform: (A1, A2) -> R
): OrderedArgsGenerator<R> = throwMaterialisingSemiOrderedArgsGeneratorNotSupported()

