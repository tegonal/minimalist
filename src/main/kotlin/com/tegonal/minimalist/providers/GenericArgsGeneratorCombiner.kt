package com.tegonal.minimalist.providers

import com.tegonal.minimalist.generators.ArgsGenerator
import com.tegonal.minimalist.generators.ArbArgsGenerator
import com.tegonal.minimalist.generators.SemiOrderedArgsGenerator

/**
 * @since 2.0.0
 */
interface GenericArgsGeneratorCombiner {

	/**
	 * Combines the [firstArgsGenerator] with the [restMaybeArgGenerators] into an [ArgsGenerator] which generates
	 * [List]s containing the zipped values.
	 *
	 * I.e. the first element of the resulting List is the value generated by the [firstArgsGenerator], the second value
	 * is the value generated by the first element in [restMaybeArgGenerators] and so on.
	 *
	 * @throws IllegalStateException The default implementation of Minimalist requires that:
	 *   - if the [firstArgsGenerator] is an [ArbArgsGenerator], then the elements in [restMaybeArgGenerators] need
	 *   to be an [ArbArgsGenerator] as well.
	 *   - if the [firstArgsGenerator] is a [SemiOrderedArgsGenerator], then the elements in [restMaybeArgGenerators]
	 *   need to be an [ArbArgsGenerator] or [SemiOrderedArgsGenerator].
	 */
	fun combineFirstWithRest(
		firstArgsGenerator: ArgsGenerator<*>,
		restMaybeArgGenerators: List<*>
	): ArgsGenerator<List<*>>
}

